{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run Alembic Upgrade",
			"type": "shell",
			"command": "alembic upgrade head",
			"group": "build"
		},
		{
			"label": "Run Alembic Upgrade via UV",
			"type": "shell",
			"command": "uv run alembic upgrade head",
			"group": "build"
		},
		{
			"label": "Check Database Schema",
			"type": "shell",
			"command": "uv run python -c \"from src.db import engine; from sqlalchemy import text; conn = engine.connect(); result = conn.execute(text('PRAGMA table_info(doente)')); print('Doente columns:', [row for row in result]); result = conn.execute(text('PRAGMA table_info(internamento)')); print('Internamento columns:', [row for row in result]); conn.close()\"",
			"group": "test"
		},
		{
			"label": "Start FastAPI Server",
			"type": "shell",
			"command": "uv run uvicorn src.api:app --reload --port 8000",
			"isBackground": true,
			"group": "build"
		},
		{
			"label": "Start FastAPI Server on Port 8001",
			"type": "shell",
			"command": "uv run uvicorn src.api:app --reload --port 8001",
			"isBackground": true,
			"group": "build"
		},
		{
			"label": "Test Patient Creation with Audit Fields",
			"type": "shell",
			"command": "curl -X POST http://127.0.0.1:8001/doentes/ -H \"Content-Type: application/json\" -d '{\"nome\": \"Audit Test Patient\", \"numero_processo\": 12345, \"sexo\": \"M\", \"morada\": \"Test Address\", \"data_nascimento\": \"1990-01-01\"}'",
			"group": "test"
		},
		{
			"label": "Simple Patient Creation Test",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/doentes/' -H 'Content-Type: application/json' -d '{\"nome\": \"Test Patient\", \"numero_processo\": 99999, \"sexo\": \"M\", \"morada\": \"Test Street\"}'",
			"group": "test"
		},
		{
			"label": "Test API Without Trailing Slash",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/doentes' -H 'Content-Type: application/json' -d '{\"nome\": \"Test Patient\", \"numero_processo\": 88888, \"sexo\": \"M\", \"morada\": \"Test Street\"}'",
			"group": "test"
		},
		{
			"label": "Test Get All Patients",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/doentes'",
			"group": "test"
		},
		{
			"label": "Test Internamento Creation with Audit Fields",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/internamentos' -H 'Content-Type: application/json' -d '{\"numero_internamento\": 77777, \"doente_id\": 1, \"data_entrada\": \"2025-09-08\", \"ASCQ_total\": 15, \"lesao_inalatoria\": \"NAO\"}'",
			"group": "test"
		},
		{
			"label": "Check Current Patient Data",
			"type": "shell",
			"command": "sleep 2 && curl -X GET 'http://127.0.0.1:8001/doentes/88888'",
			"group": "test"
		},
		{
			"label": "Get Patient by Numero Processo",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/doentes/numero_processo/88888'",
			"group": "test"
		},
		{
			"label": "Get Internamento by Number",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/internamentos/77777'",
			"group": "test"
		},
		{
			"label": "Create Migration for TipoAcidente",
			"type": "shell",
			"command": "uv run alembic revision -m \"add tipoacidente table and foreign key relationship\"",
			"group": "build"
		},
		{
			"label": "Run TipoAcidente Migration",
			"type": "shell",
			"command": "uv run alembic upgrade head",
			"group": "build"
		},
		{
			"label": "Check Database Tables",
			"type": "shell",
			"command": "uv run python -c \"from src.db import engine; from sqlalchemy import text; conn = engine.connect(); result = conn.execute(text('SELECT name FROM sqlite_master WHERE type=\\\"table\\\"')); print('Tables:', [row[0] for row in result]); conn.close()\"",
			"group": "test"
		},
		{
			"label": "Mark Migration as Complete",
			"type": "shell",
			"command": "uv run alembic stamp head",
			"group": "build"
		},
		{
			"label": "Check TipoAcidente Table Schema",
			"type": "shell",
			"command": "uv run python -c \"from src.db import engine; from sqlalchemy import text; conn = engine.connect(); result = conn.execute(text('PRAGMA table_info(tipoacidente)')); print('TipoAcidente columns:', [row for row in result]); conn.close()\"",
			"group": "test"
		},
		{
			"label": "Create TipoAcidente 1",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/tipos_acidente' -H 'Content-Type: application/json' -d '{\"acidente\": \"Queimadura térmica\", \"tipo_acidente\": \"Doméstico\"}'",
			"group": "test"
		},
		{
			"label": "Create TipoAcidente 2",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/tipos_acidente' -H 'Content-Type: application/json' -d '{\"acidente\": \"Queimadura elétrica\", \"tipo_acidente\": \"Profissional\"}'",
			"group": "test"
		},
		{
			"label": "Create TipoAcidente 3",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/tipos_acidente' -H 'Content-Type: application/json' -d '{\"acidente\": \"Incêndio florestal\", \"tipo_acidente\": \"Natural\"}'",
			"group": "test"
		},
		{
			"label": "Get All TipoAcidente",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/tipos_acidente'",
			"group": "test"
		},
		{
			"label": "Test Internamento with TipoAcidente Foreign Key",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/internamentos' -H 'Content-Type: application/json' -d '{\"numero_internamento\": 66666, \"doente_id\": 1, \"data_entrada\": \"2025-09-08\", \"ASCQ_total\": 25, \"lesao_inalatoria\": \"SIM\", \"tipo_acidente\": 1}'",
			"group": "test"
		},
		{
			"label": "Test Invalid TipoAcidente Foreign Key",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/internamentos' -H 'Content-Type: application/json' -d '{\"numero_internamento\": 55555, \"doente_id\": 1, \"data_entrada\": \"2025-09-08\", \"ASCQ_total\": 10, \"lesao_inalatoria\": \"NAO\", \"tipo_acidente\": 999}'",
			"group": "test"
		},
		{
			"label": "Test GET Doente by ID",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/doentes/1'",
			"group": "test"
		},
		{
			"label": "Test PUT Update Doente",
			"type": "shell",
			"command": "curl -X PUT 'http://127.0.0.1:8001/doentes/1' -H 'Content-Type: application/json' -d '{\"nome\": \"Updated Patient Name\", \"numero_processo\": 88888, \"sexo\": \"F\", \"morada\": \"Updated Address\", \"data_nascimento\": \"1985-01-01\"}'",
			"group": "test"
		},
		{
			"label": "Test PUT Update Doente Fixed",
			"type": "shell",
			"command": "curl -X PUT 'http://127.0.0.1:8001/doentes/1' -H 'Content-Type: application/json' -d '{\"nome\": \"Updated Patient Name\", \"numero_processo\": 88888, \"sexo\": \"F\", \"morada\": \"Updated Address\", \"data_nascimento\": \"1985-01-01\"}'",
			"group": "test"
		},
		{
			"label": "Test PATCH Partial Update Doente",
			"type": "shell",
			"command": "curl -X PATCH 'http://127.0.0.1:8001/doentes/1' -H 'Content-Type: application/json' -d '{\"nome\": \"Partially Updated Name\"}'",
			"group": "test"
		},
		{
			"label": "Test DELETE Doente",
			"type": "shell",
			"command": "curl -X DELETE 'http://127.0.0.1:8001/doentes/2'",
			"group": "test"
		},
		{
			"label": "Verify Deletion - List All Doentes",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/doentes'",
			"group": "test"
		},
		{
			"label": "Test DELETE Non-existent Doente",
			"type": "shell",
			"command": "curl -X DELETE 'http://127.0.0.1:8001/doentes/999'",
			"group": "test"
		},
		{
			"label": "Create Migration for AgenteQueimadura",
			"type": "shell",
			"command": "uv run alembic revision -m \"add agentequeimadura table and foreign key relationship\"",
			"group": "build"
		},
		{
			"label": "Create AgenteQueimadura 1",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/agentes_queimadura' -H 'Content-Type: application/json' -d '{\"agente_queimadura\": \"Fogo direto\", \"nota\": \"Exposição direta ao fogo\"}'",
			"group": "test"
		},
		{
			"label": "Create AgenteQueimadura 2",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/agentes_queimadura' -H 'Content-Type: application/json' -d '{\"agente_queimadura\": \"Líquido quente\", \"nota\": \"Água fervente, óleo quente, etc.\"}'",
			"group": "test"
		},
		{
			"label": "Create AgenteQueimadura 3",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/agentes_queimadura' -H 'Content-Type: application/json' -d '{\"agente_queimadura\": \"Electricidade\", \"nota\": \"Queimadura eléctrica por contacto\"}'",
			"group": "test"
		},
		{
			"label": "Get All AgenteQueimadura",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/agentes_queimadura'",
			"group": "test"
		},
		{
			"label": "Get AgenteQueimadura by ID",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/agentes_queimadura/2'",
			"group": "test"
		},
		{
			"label": "Check Available Patients",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/doentes'",
			"group": "test"
		},
		{
			"label": "Test Internamento with AgenteQueimadura Foreign Key",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/internamentos' -H 'Content-Type: application/json' -d '{\"numero_internamento\": 44444, \"doente_id\": 1, \"data_entrada\": \"2025-09-09\", \"ASCQ_total\": 30, \"lesao_inalatoria\": \"SIM\", \"tipo_acidente\": 1, \"agente_queimadura\": 2}'",
			"group": "test"
		},
		{
			"label": "Test Invalid AgenteQueimadura Foreign Key",
			"type": "shell",
			"command": "curl -X POST 'http://127.0.0.1:8001/internamentos' -H 'Content-Type: application/json' -d '{\"numero_internamento\": 33333, \"doente_id\": 1, \"data_entrada\": \"2025-09-09\", \"ASCQ_total\": 10, \"lesao_inalatoria\": \"NAO\", \"agente_queimadura\": 999}'",
			"group": "test"
		},
		{
			"label": "Check AgenteQueimadura Table Schema",
			"type": "shell",
			"command": "uv run python -c \"from src.db import engine; from sqlalchemy import text; conn = engine.connect(); result = conn.execute(text('PRAGMA table_info(agentequeimadura)')); print('AgenteQueimadura columns:', [row for row in result]); result = conn.execute(text('PRAGMA table_info(internamento)')); print('Internamento columns:', [row for row in result]); conn.close()\"",
			"group": "test"
		},
		{
			"label": "Get Internamento with AgenteQueimadura Foreign Key",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/internamentos/44444'",
			"group": "test"
		},
		{
			"label": "Test Non-existent AgenteQueimadura",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/agentes_queimadura/999'",
			"group": "test"
		},
		{
			"label": "Run AgenteQueimadura Tests",
			"type": "shell",
			"command": "uv run pytest tests/test_agentequeimadura.py -v",
			"group": "test"
		},
		{
			"label": "Run AgenteQueimadura Tests Fixed",
			"type": "shell",
			"command": "uv run pytest tests/test_agentequeimadura.py -v",
			"group": "test"
		},
		{
			"label": "Check Linting Errors",
			"type": "shell",
			"command": "uv run ruff check --no-fix",
			"group": "test"
		},
		{
			"label": "Final Linting Check",
			"type": "shell",
			"command": "uv run ruff check --no-fix",
			"group": "test"
		},
		{
			"label": "Run All Tests",
			"type": "shell",
			"command": "uv run pytest -v",
			"group": "test"
		},
		{
			"label": "Fix Init File Name",
			"type": "shell",
			"command": "mv tests/__initi__.py tests/__init__.py",
			"group": "build"
		},
		{
			"label": "Run All Tests with Summary",
			"type": "shell",
			"command": "uv run pytest -v --tb=short",
			"group": "test"
		},
		{
			"label": "Final API Verification",
			"type": "shell",
			"command": "curl -X GET 'http://127.0.0.1:8001/agentes_queimadura' | jq .",
			"group": "test"
		},
		{
			"label": "Test AgenteQueimadura with Fixed Connections",
			"type": "shell",
			"command": "uv run pytest tests/test_agentequeimadura.py -v",
			"group": "test"
		},
		{
			"label": "Test AgenteQueimadura Without ResourceWarnings",
			"type": "shell",
			"command": "uv run pytest tests/test_agentequeimadura.py -v -W ignore::ResourceWarning",
			"group": "test"
		},
		{
			"label": "Final Clean Test Run",
			"type": "shell",
			"command": "uv run pytest tests/test_agentequeimadura.py -v",
			"group": "test"
		},
		{
			"label": "Run Test Task with Coverage",
			"type": "shell",
			"command": "uv run task test",
			"group": "test"
		},
		{
			"label": "List Database Tables",
			"type": "shell",
			"command": "uv run python -c \"from src.db import engine; from sqlalchemy import text; conn = engine.connect(); result = conn.execute(text('SELECT name FROM sqlite_master WHERE type=\\\"table\\\" ORDER BY name')); tables = [row[0] for row in result]; print('\\n=== AVAILABLE TABLES ==='); [print(f'  • {table}') for table in tables]; conn.close()\"",
			"group": "test"
		},
		{
			"label": "Test Database Relationships with SQL Queries",
			"type": "shell",
			"command": "uv run python -c \"\nfrom src.db import engine\nfrom sqlalchemy import text\nimport textwrap\n\nconn = engine.connect()\n\n# Helper function to print results nicely\ndef print_query_results(title, query, conn):\n    print(f'\\n{\"=\"*60}')\n    print(f'{title:^60}')\n    print(f'{\"=\"*60}')\n    print(f'Query: {query}')\n    print(f'{\"=\"*60}')\n    result = conn.execute(text(query))\n    rows = result.fetchall()\n    columns = result.keys()\n    \n    if not rows:\n        print('No results found.')\n        return\n    \n    # Calculate column widths\n    col_widths = []\n    for i, col in enumerate(columns):\n        max_width = max(len(str(col)), max(len(str(row[i])) for row in rows))\n        col_widths.append(min(max_width, 25))  # Max width 25 chars\n    \n    # Print header\n    header = ' | '.join(str(col)[:col_widths[i]].ljust(col_widths[i]) for i, col in enumerate(columns))\n    print(header)\n    print('-' * len(header))\n    \n    # Print rows\n    for row in rows:\n        row_str = ' | '.join(str(row[i])[:col_widths[i]].ljust(col_widths[i]) for i in range(len(row)))\n        print(row_str)\n    \n    print(f'\\nTotal rows: {len(rows)}')\n    print()\n\n# Query 1: List all tables and their record counts\nprint_query_results(\n    'DATABASE OVERVIEW - TABLE RECORD COUNTS',\n    '''SELECT \n    'doente' as table_name, COUNT(*) as record_count FROM doente\n    UNION ALL\n    SELECT 'internamento', COUNT(*) FROM internamento\n    UNION ALL\n    SELECT 'tipoacidente', COUNT(*) FROM tipoacidente\n    UNION ALL\n    SELECT 'agentequeimadura', COUNT(*) FROM agentequeimadura''',\n    conn\n)\n\n# Query 2: Full patient data with internamento information\nprint_query_results(\n    'PATIENTS WITH THEIR INTERNAMENTOS',\n    '''SELECT \n        d.id as patient_id,\n        d.nome as patient_name,\n        d.numero_processo,\n        d.sexo,\n        d.data_nascimento,\n        d.morada,\n        i.numero_internamento,\n        i.data_entrada,\n        i.data_alta,\n        i.ASCQ_total,\n        i.lesao_inalatoria,\n        DATE(d.created_at) as patient_created,\n        DATE(i.created_at) as internamento_created\n    FROM doente d\n    LEFT JOIN internamento i ON d.id = i.doente_id\n    ORDER BY d.id, i.data_entrada''',\n    conn\n)\n\n# Query 3: Internamentos with lookup table data (tipo acidente and agente queimadura)\nprint_query_results(\n    'INTERNAMENTOS WITH ACCIDENT TYPE AND BURN AGENT',\n    '''SELECT \n        i.numero_internamento,\n        d.nome as patient_name,\n        i.data_entrada,\n        i.ASCQ_total,\n        i.lesao_inalatoria,\n        ta.acidente as accident_type,\n        ta.tipo_acidente as accident_category,\n        aq.agente_queimadura as burn_agent,\n        aq.nota as agent_note\n    FROM internamento i\n    LEFT JOIN doente d ON i.doente_id = d.id\n    LEFT JOIN tipoacidente ta ON i.tipo_acidente = ta.id\n    LEFT JOIN agentequeimadura aq ON i.agente_queimadura = aq.id\n    ORDER BY i.data_entrada DESC''',\n    conn\n)\n\n# Query 4: Summary statistics by accident type\nprint_query_results(\n    'STATISTICS BY ACCIDENT TYPE',\n    '''SELECT \n        COALESCE(ta.acidente, 'Unknown/Null') as accident_type,\n        COALESCE(ta.tipo_acidente, 'Unknown/Null') as accident_category,\n        COUNT(i.id) as total_internamentos,\n        AVG(i.ASCQ_total) as avg_ascq,\n        MIN(i.ASCQ_total) as min_ascq,\n        MAX(i.ASCQ_total) as max_ascq,\n        SUM(CASE WHEN i.lesao_inalatoria = 'SIM' THEN 1 ELSE 0 END) as with_inhalation_injury\n    FROM internamento i\n    LEFT JOIN tipoacidente ta ON i.tipo_acidente = ta.id\n    GROUP BY ta.id, ta.acidente, ta.tipo_acidente\n    ORDER BY total_internamentos DESC''',\n    conn\n)\n\n# Query 5: Summary statistics by burn agent\nprint_query_results(\n    'STATISTICS BY BURN AGENT',\n    '''SELECT \n        COALESCE(aq.agente_queimadura, 'Unknown/Null') as burn_agent,\n        COUNT(i.id) as total_internamentos,\n        AVG(i.ASCQ_total) as avg_ascq,\n        SUM(CASE WHEN i.lesao_inalatoria = 'SIM' THEN 1 ELSE 0 END) as with_inhalation_injury,\n        MIN(i.data_entrada) as earliest_admission,\n        MAX(i.data_entrada) as latest_admission\n    FROM internamento i\n    LEFT JOIN agentequeimadura aq ON i.agente_queimadura = aq.id\n    GROUP BY aq.id, aq.agente_queimadura\n    ORDER BY total_internamentos DESC''',\n    conn\n)\n\n# Query 6: Detailed lookup table contents\nprint_query_results(\n    'LOOKUP TABLE: TIPO ACIDENTE',\n    '''SELECT \n        id,\n        acidente,\n        tipo_acidente\n    FROM tipoacidente\n    ORDER BY id''',\n    conn\n)\n\nprint_query_results(\n    'LOOKUP TABLE: AGENTE QUEIMADURA',\n    '''SELECT \n        id,\n        agente_queimadura,\n        nota\n    FROM agentequeimadura\n    ORDER BY id''',\n    conn\n)\n\n# Query 7: Data integrity check - foreign key relationships\nprint_query_results(\n    'DATA INTEGRITY CHECK - FOREIGN KEY RELATIONSHIPS',\n    '''SELECT \n        'Valid TipoAcidente FKs' as check_type,\n        COUNT(*) as count\n    FROM internamento i\n    INNER JOIN tipoacidente ta ON i.tipo_acidente = ta.id\n    WHERE i.tipo_acidente IS NOT NULL\n    UNION ALL\n    SELECT \n        'Invalid TipoAcidente FKs',\n        COUNT(*)\n    FROM internamento i\n    WHERE i.tipo_acidente IS NOT NULL \n    AND i.tipo_acidente NOT IN (SELECT id FROM tipoacidente)\n    UNION ALL\n    SELECT \n        'Valid AgenteQueimadura FKs',\n        COUNT(*)\n    FROM internamento i\n    INNER JOIN agentequeimadura aq ON i.agente_queimadura = aq.id\n    WHERE i.agente_queimadura IS NOT NULL\n    UNION ALL\n    SELECT \n        'Invalid AgenteQueimadura FKs',\n        COUNT(*)\n    FROM internamento i\n    WHERE i.agente_queimadura IS NOT NULL \n    AND i.agente_queimadura NOT IN (SELECT id FROM agentequeimadura)''',\n    conn\n)\n\nconn.close()\nprint(f'{\"=\"*60}')\nprint('DATABASE RELATIONSHIP TESTING COMPLETE')\nprint(f'{\"=\"*60}')\n\"",
			"group": "test"
		},
		{
			"label": "Run Database Relationship Tests",
			"type": "shell",
			"command": "uv run python test_database.py",
			"group": "test"
		},
		{
			"label": "Database Analysis Summary",
			"type": "shell",
			"command": "echo '\n🏥 DATABASE ANALYSIS SUMMARY\n========================\n\n📊 CURRENT DATA:\n• 1 Patient (\"sou o numero um\")\n• 7 Internamentos (hospital admissions)\n• 4 Accident Types configured\n• 3 Burn Agents configured\n\n✅ WORKING RELATIONSHIPS:\n• Patient → Internamentos: All 5 valid internamentos linked to patient ID 1\n• TipoAcidente FK: 2 valid, 3 with NULL/invalid references\n• AgenteQueimadura FK: 1 valid, 3 with NULL/invalid references\n\n🔍 KEY INSIGHTS:\n• Patient has multiple admissions (5 total)\n• ASCQ scores range from 10-30 (avg: 18.0)\n• 2 cases with inhalation injuries\n• Most recent admission: Sept 9, 2025\n• Only 1 admission has both accident type and burn agent data\n\n🚀 FOREIGN KEY INTEGRITY:\n• Valid relationships working correctly\n• Some test data has NULL foreign keys (expected for incomplete records)\n• No broken foreign key constraints detected\n\n'",
			"group": "test"
		},
		{
			"label": "Clean up test database script",
			"type": "shell",
			"command": "rm test_database.py",
			"group": "build"
		}
	]
}